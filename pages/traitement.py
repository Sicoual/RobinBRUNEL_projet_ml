import streamlit as st
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

def app():
    st.header("üßπ Nettoyage et Pr√©traitement des donn√©es")

    # Chargement des donn√©es
    df = pd.read_csv("data/vin.csv")

    st.markdown("### Aper√ßu initial des donn√©es")
    st.dataframe(df.head())

    # Gestion valeurs manquantes
    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()

    st.markdown("### Remplissage des valeurs manquantes")

    # Imputation num√©rique
    num_strategy = st.selectbox(
        "M√©thode d'imputation (num√©rique) :",
        ["Ne rien faire", "Moyenne", "M√©diane", "Valeur la plus fr√©quente"]
    )
    # Imputation cat√©gorique
    cat_strategy = st.selectbox(
        "M√©thode d'imputation (cat√©gorique) :",
        ["Ne rien faire", "Valeur la plus fr√©quente", "Valeur personnalis√©e"]
    )
    constant_fill_value = None
    if cat_strategy == "Valeur personnalis√©e":
        constant_fill_value = st.text_input("Valeur personnalis√©e :", value="Inconnu")

    mapping = {
        "Ne rien faire": None,
        "Moyenne": "mean",
        "M√©diane": "median",
        "Valeur la plus fr√©quente": "most_frequent",
        "Valeur personnalis√©e": "constant"
    }

    if mapping[num_strategy] and df[numeric_cols].isnull().sum().sum() > 0:
        imputer_num = SimpleImputer(strategy=mapping[num_strategy])
        df[numeric_cols] = imputer_num.fit_transform(df[numeric_cols])
        st.success(f"‚úÖ Imputation num√©rique : {num_strategy}")

    if mapping[cat_strategy] and df[categorical_cols].isnull().sum().sum() > 0:
        if cat_strategy == "Valeur personnalis√©e":
            imputer_cat = SimpleImputer(strategy="constant", fill_value=constant_fill_value)
        else:
            imputer_cat = SimpleImputer(strategy=mapping[cat_strategy])
        df[categorical_cols] = imputer_cat.fit_transform(df[categorical_cols])
        st.success(f"‚úÖ Imputation cat√©gorique : {cat_strategy}")

    st.markdown("### Suppression de colonnes")
    cols_to_drop = st.multiselect("Colonnes √† supprimer :", df.columns)
    if cols_to_drop:
        df = df.drop(columns=cols_to_drop)
        st.success(f"Colonnes supprim√©es : {', '.join(cols_to_drop)}")

    st.markdown("### Standardisation")
    cols_to_standardize = st.multiselect(
        "Colonnes num√©riques √† standardiser :",
        [col for col in numeric_cols if col in df.columns]
    )
    if cols_to_standardize:
        scaler = StandardScaler()
        df[cols_to_standardize] = scaler.fit_transform(df[cols_to_standardize])
        st.success("‚úÖ Standardisation appliqu√©e.")

    st.markdown("### Donn√©es pr√©trait√©es")
    st.dataframe(df.head())

    # Sauvegarde dans session_state
    st.session_state['cleaned_df'] = df
    st.session_state['feature_names'] = [col for col in df.columns if col != "target"]

    st.success("‚úÖ Donn√©es pr√©trait√©es sauvegard√©es pour entra√Ænement.")
