import streamlit as st 
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

def app():
    st.header("üßπ Nettoyage et Pr√©traitement des donn√©es")

    # Chargement des donn√©es
    df = pd.read_csv("data/vin.csv")

    # Copie originale pour suivi
    original_df = df.copy()

    st.markdown("### 1. Aper√ßu initial des donn√©es")
    missing_values = df.isnull().sum()
    total_missing = missing_values.sum()
    if total_missing == 0:
        st.info("‚úÖ Aucune valeur manquante d√©tect√©e dans le jeu de donn√©es.")
    else:
        st.warning("‚ö†Ô∏è Donn√©es manquantes d√©tect√©es :")
        st.write(missing_values[missing_values > 0])

    # S√©paration colonnes num√©riques et cat√©goriques
    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()

    st.markdown("### 2. Remplissage des valeurs manquantes")

    # Imputation num√©rique
    if numeric_cols:
        st.write(f"**Colonnes num√©riques :** {', '.join(numeric_cols)}")
        num_strategy = st.selectbox(
            "M√©thode d'imputation des colonnes num√©riques :",
            ["Ne rien faire", "Moyenne", "M√©diane", "Valeur la plus fr√©quente"]
        )
    else:
        num_strategy = "Ne rien faire"

    # Imputation cat√©gorique
    if categorical_cols:
        st.write(f"**Colonnes cat√©goriques :** {', '.join(categorical_cols)}")
        cat_strategy = st.selectbox(
            "M√©thode d'imputation des colonnes cat√©goriques :",
            ["Ne rien faire", "Valeur la plus fr√©quente", "Valeur personnalis√©e"]
        )
        constant_fill_value = None
        if cat_strategy == "Valeur personnalis√©e":
            constant_fill_value = st.text_input("Valeur personnalis√©e :", value="Inconnu")
    else:
        cat_strategy = "Ne rien faire"

    mapping = {
        "Ne rien faire": None,
        "Moyenne": "mean",
        "M√©diane": "median",
        "Valeur la plus fr√©quente": "most_frequent",
        "Valeur personnalis√©e": "constant"
    }

    if mapping[num_strategy] and df[numeric_cols].isnull().sum().sum() > 0:
        imputer_num = SimpleImputer(strategy=mapping[num_strategy])
        df[numeric_cols] = imputer_num.fit_transform(df[numeric_cols])
        st.success(f"‚úÖ Imputation num√©rique : {num_strategy}")

    if mapping[cat_strategy] and df[categorical_cols].isnull().sum().sum() > 0:
        if cat_strategy == "Valeur personnalis√©e":
            imputer_cat = SimpleImputer(strategy="constant", fill_value=constant_fill_value)
        else:
            imputer_cat = SimpleImputer(strategy=mapping[cat_strategy])
        df[categorical_cols] = imputer_cat.fit_transform(df[categorical_cols])
        st.success(f"‚úÖ Imputation cat√©gorique : {cat_strategy}")

    st.markdown("### 3. Suppression de colonnes")
    cols_to_drop = st.multiselect("Colonnes √† supprimer :", df.columns)
    if cols_to_drop:
        df = df.drop(columns=cols_to_drop)
        st.success(f"Colonnes supprim√©es : {', '.join(cols_to_drop)}")

    st.markdown("### 4. Standardisation")
    cols_to_standardize = st.multiselect(
        "Colonnes num√©riques √† standardiser :",
        [col for col in numeric_cols if col in df.columns]
    )

    if cols_to_standardize:
        scaler = StandardScaler()
        df_std = df.copy()
        df_std[cols_to_standardize] = scaler.fit_transform(df_std[cols_to_standardize])

        st.success("‚úÖ Standardisation appliqu√©e.")
        
        st.markdown("#### üîÑ Colonnes standardis√©es")
        st.dataframe(df_std[cols_to_standardize].head())

        st.markdown("#### üìä Colonnes non standardis√©es")
        other_cols = [col for col in df.columns if col not in cols_to_standardize]
        st.dataframe(df_std[other_cols].head())

        df = df_std  # Mise √† jour du DataFrame principal
    else:
        st.info("Aucune colonne s√©lectionn√©e pour la standardisation.")

    st.markdown("### 5. V√©rification finale des valeurs manquantes")
    final_missing = df.isnull().sum()
    total_final_missing = final_missing.sum()
    if total_final_missing == 0:
        st.success("‚úÖ Aucune valeur manquante apr√®s nettoyage.")
    else:
        st.warning("‚ö†Ô∏è Valeurs manquantes restantes :")
        st.write(final_missing[final_missing > 0])

    st.markdown("### 6. Donn√©es finales apr√®s nettoyage et standardisation")
    st.dataframe(df.head())
